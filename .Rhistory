),
x = "Buchung x Tage vor Abfahrt",
y = "Preis [EUR, CHF]",
fill = "",
y = "Preis [EUR, CHF]"
)
# add color scales
# scale_color_percentage() +
# scale_fill_manual(values = c("#D2D2D2", "#A8A8A8", "#444444"))
print(p)
ggsave(paste0(erm_prod_input, class_input, "overview.jpg"), plot = p)
}
# loop through the different levels and combinations, print plots
for (class_input in c(1, 2)) {
for (erm_prod_input in c("Keine", "BC25", "HTA")){
make_days_before_plot(plot_df, class_input = class_input, erm_prod_input = erm_prod_input)
make_days_before_plot_lines(plot_df_agg_by_od, class_input = class_input, erm_prod_input = erm_prod_input)
}
}
make_days_before_plot_lines <-
function(plot_df, class_input, erm_prod_input) {
plot_df <-
plot_df %>% filter(class == class_input, erm_prod == erm_prod_input)
global_max_price <- max(plot_df$value)
# build the plot
p <- ggplot(data = plot_df) +
#geom_point(mapping = aes(x = is_int, y = mean_price)) + # basic barplot
geom_line(plot_df %>% filter(type %in% c("int", "sum_price")), mapping = aes(x = is_international, y  = value, group = OD, alpha = percentage_of_absatz), show.legend = TRUE)+
# add facet wrap for the different days_before_x
facet_grid(
cols = vars(days_before_x_for_plot),
labeller = (facet_labels)
) +
# set theme and and use minimal ink
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line.y = element_blank(),
panel.grid.major.x = element_blank()
) +  # add horizontal lines on top of the brackets
# add titles
labs(
color = "",
title = paste0(
"Neue GewichtePreise nach Vorverkaufsperiode, ",
class_input,
". Klasse, Ermässigung: ",
erm_prod_input
),
x = "Buchung x Tage vor Abfahrt",
y = "Preis [EUR, CHF]",
fill = "",
y = "Preis [EUR, CHF]"
)
# add color scales
# scale_color_percentage() +
# scale_fill_manual(values = c("#D2D2D2", "#A8A8A8", "#444444"))
print(p)
ggsave(paste0(erm_prod_input, class_input, "overview.jpg"), plot = p)
}
# loop through the different levels and combinations, print plots
for (class_input in c(1, 2)) {
for (erm_prod_input in c("Keine", "BC25", "HTA")){
make_days_before_plot(plot_df, class_input = class_input, erm_prod_input = erm_prod_input)
make_days_before_plot_lines(plot_df_agg_by_od, class_input = class_input, erm_prod_input = erm_prod_input)
}
}
make_days_before_plot_lines <-
function(plot_df, class_input, erm_prod_input) {
plot_df <-
plot_df %>% filter(class == class_input, erm_prod == erm_prod_input)
global_max_price <- max(plot_df$value)
# build the plot
p <- ggplot(data = plot_df) +
#geom_point(mapping = aes(x = is_int, y = mean_price)) + # basic barplot
geom_line(plot_df %>% filter(type %in% c("int", "sum_price")), mapping = aes(x = is_international, y  = value, group = OD, alpha = percentage_of_absatz), show.legend = TRUE)+
# add facet wrap for the different days_before_x
facet_grid(
cols = vars(days_before_x_for_plot),
labeller = (facet_labels)
) +
# set theme and and use minimal ink
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line.y = element_blank(),
panel.grid.major.x = element_blank()
) +  # add horizontal lines on top of the brackets
# add titles
labs(
color = "",
title = paste0(
"Preise nach Vorverkaufsperiode, ",
class_input,
". Klasse, Ermässigung: ",
erm_prod_input
),
x = "Buchung x Tage vor Abfahrt",
y = "Preis [EUR, CHF]",
fill = "",
y = "Preis [EUR, CHF]",
alpha = "Anteil Absatz [%]"
)
# add color scales
# scale_color_percentage() +
# scale_fill_manual(values = c("#D2D2D2", "#A8A8A8", "#444444"))
print(p)
}
# loop through the different levels and combinations, print plots
for (class_input in c(1, 2)) {
for (erm_prod_input in c("Keine", "BC25", "HTA")){
make_days_before_plot(plot_df, class_input = class_input, erm_prod_input = erm_prod_input)
make_days_before_plot_lines(plot_df_agg_by_od, class_input = class_input, erm_prod_input = erm_prod_input)
}
}
a = Sys.info()[1]
a
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, dpi = 50, fig.width = 8, fig.height = 6, eval = TRUE)
# load libraries
library(tidyverse)
library(ggplot2)
library(openxlsx)
library(lubridate)
# set directory, load data
system_name <- Sys.info()[1]
if (system_name == "Linux"){
working_directory <- "/home/jovyan/work/temporary_data_reports"
}
if (system_name == "Windows"){
working_directory <- "C:/Users/u237480/Documents/dynamit_analysen"
}
setwd(working_directory)
result_directory_name_analysis <- paste0(working_directory, "/all_results")
file.names <- list.files(result_directory_name_analysis)
full_df <- data.frame()
for (name in file.names){
combined_df <- read.xlsx(paste0(result_directory_name_analysis, "/", name))
full_df <- rbind(full_df, combined_df)
}
# make datetimes correct
full_df <- full_df %>% mutate(requests_date = openxlsx::convertToDate(requests_date),
travel_date = dmy(travel_date),
days_before_x = as.numeric(date(travel_date) - date(requests_date)),
OD = paste0(von_name, " - ", nach_name),
zuege_planned = str_replace_all(zuege_planned, "(?<!RE)(?=\\d{5})", "RE"),
is_international = segment == "int") %>% # make sure all train numbers without train category are REs
filter(days_before_x %in% c(1, 3, 14, 30, 55, 60), (took_correct_train)) %>% # omit issues with night train
ungroup() %>%
mutate(days_before_x_for_plot = case_when((days_before_x == 55) ~ 60, # just for plotting
T ~ days_before_x)) %>%
select(-c(days_before_x, took_correct_train, zuege_taken))
factor_levels <- as.character(c(
"Zürich Hb - Frankfurt (Main) Hbf" ,
"Frankfurt (Main) Hbf - Zürich Hb",
"Zürich Hb - Hamburg Hbf",
"Hamburg Hbf - Zürich Hb",
"Zürich Hb - Koeln Hbf",
"Koeln Hbf - Zürich Hb",
"Zürich Hb - Bad Oldesloe",
"Bad Oldesloe - Zürich Hb",
"Geneve - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Geneve",
"Basel SBB - Freiburg (Breisgau) Hbf",
"Freiburg (Breisgau) Hbf - Basel SBB",
"Bern - Berlin Hbf",
"Berlin Hbf - Bern" ,
"Luzern - Hamburg Hbf"  ,
"Hamburg Hbf - Luzern",
"Chur - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Chur",
"St Moritz - Hamburg Hbf" ,
"Hamburg Hbf - St Moritz",
"Lugano - Freiburg (Breisgau) Hbf",
"Freiburg (Breisgau) Hbf - Lugano",
"Bern - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Bern",
"Basel SBB - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Basel SBB"
))
full_df$OD <-
factor(
full_df$OD,
levels = factor_levels)
full_df <- full_df %>%
group_by(across(-c(product_id, product_name, price))) %>% # get cheapest ticket for each train and segment
summarize(price = min(price))
# color scale such that price decreases are green and increases are red
scale_color_percentage <- function(...){
ggplot2:::manual_scale(
'color',
values = setNames(c( "#00973B", "#000000", "#EB0000" ),c("-1", "0", "1")),
...
)
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, dpi = 50, fig.width = 8, fig.height = 6, eval = TRUE)
# load libraries
library(tidyverse)
library(ggplot2)
library(openxlsx)
library(lubridate)
# set directory, load data
system_name <- Sys.info()[1]
if (system_name == "Linux"){
working_directory <- "/home/jovyan/work/temporary_data_reports"
}
if (system_name == "Windows"){
working_directory <- "C:/Users/u237480/Documents/dynamit_analysen"
}
setwd(working_directory)
result_directory_name_analysis <- paste0(working_directory, "/all_results")
file.names <- list.files(result_directory_name_analysis)
full_df <- data.frame()
for (name in file.names){
combined_df <- read.xlsx(paste0(result_directory_name_analysis, "/", name))
full_df <- rbind(full_df, combined_df)
}
# make datetimes correct
full_df <- full_df %>% mutate(requests_date = openxlsx::convertToDate(requests_date),
travel_date = dmy(travel_date),
days_before_x = as.numeric(date(travel_date) - date(requests_date)),
OD = paste0(von_name, " - ", nach_name),
zuege_planned = str_replace_all(zuege_planned, "(?<!RE)(?=\\d{5})", "RE"),
is_international = segment == "int") %>% # make sure all train numbers without train category are REs
filter(days_before_x %in% c(1, 3, 14, 30, 55, 60), (took_correct_train)) %>% # omit issues with night train
ungroup() %>%
mutate(days_before_x_for_plot = case_when((days_before_x == 55) ~ 60, # just for plotting
T ~ days_before_x)) %>%
select(-c(days_before_x, took_correct_train, zuege_taken))
factor_levels <- as.character(c(
"Zürich Hb - Frankfurt (Main) Hbf" ,
"Frankfurt (Main) Hbf - Zürich Hb",
"Zürich Hb - Hamburg Hbf",
"Hamburg Hbf - Zürich Hb",
"Zürich Hb - Koeln Hbf",
"Koeln Hbf - Zürich Hb",
"Zürich Hb - Bad Oldesloe",
"Bad Oldesloe - Zürich Hb",
"Geneve - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Geneve",
"Basel SBB - Freiburg (Breisgau) Hbf",
"Freiburg (Breisgau) Hbf - Basel SBB",
"Bern - Berlin Hbf",
"Berlin Hbf - Bern" ,
"Luzern - Hamburg Hbf"  ,
"Hamburg Hbf - Luzern",
"Chur - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Chur",
"St Moritz - Hamburg Hbf" ,
"Hamburg Hbf - St Moritz",
"Lugano - Freiburg (Breisgau) Hbf",
"Freiburg (Breisgau) Hbf - Lugano",
"Bern - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Bern",
"Basel SBB - Frankfurt (Main) Hbf",
"Frankfurt (Main) Hbf - Basel SBB"
))
full_df$OD <-
factor(
full_df$OD,
levels = factor_levels)
full_df <- full_df %>%
group_by(across(-c(product_id, product_name, price))) %>% # get cheapest ticket for each train and segment
summarize(price = min(price))
# color scale such that price decreases are green and increases are red
scale_color_percentage <- function(...){
ggplot2:::manual_scale(
'color',
values = setNames(c( "#00973B", "#000000", "#EB0000" ),c("-1", "0", "1")),
...
)
}
setwd(working_directory)
# Absatzdaten laden
emp_dist_df <-
readxl::read_xlsx("2022_nachfragedaten/umsatz_absatz_od_vorkverkaufsfrist_2022.xlsx")
emp_dist_df <- emp_dist_df %>% mutate(
od_pair = str_replace(od_pair, "Z.*rich H(B|b)", "Zürich Hb"),
od_pair = str_replace(od_pair, "Freiburg(Brsg)Hbf", "Freiburg (Breisgau) Hbf"),
od_pair = str_replace(od_pair, "Brsg", "Breisgau"),
od_pair = str_replace(od_pair, "Frankfurt(Main)Hbf", "Frankfurt(Ma"),
od_pair = str_replace(od_pair, "Basel SBB", "Basel SBB"),
od_pair = str_replace(od_pair, "Berlin Hbf(tief)", "Berlin Hbf (Europaplatz)"),
od_pair = str_replace(od_pair, "St. Moritz", "St Moritz"),
od_pair = str_replace(od_pair, "K”ln Hbf", "Koeln Hbf")
)
absatz_df_od <- emp_dist_df %>%
group_by(od_pair) %>%
summarize(absatz_by_od = sum(absatz)) %>%
ungroup() %>%
mutate(
total_absatz = sum(absatz_by_od),
# total over all ODs
percentage_of_absatz = absatz_by_od / total_absatz * 100
)
full_df <- full_df %>%
mutate(
od_pair = str_replace(OD, "\\s-\\s", "-"),
# omit whitespaces before and after hyphen
od_pair = str_replace(od_pair, "\\s(?=\\()", ""),
#omit whitespaces before and after brackets
od_pair = str_replace(od_pair, "(?<=\\))\\s", "")
) %>%
left_join(absatz_df_od, by = c("od_pair"))%>%
select(-c(od_pair))
od_plot_df <- full_df %>%
ungroup() %>%
select(c(OD, percentage_of_absatz, absatz_by_od)) %>%
distinct() %>%
mutate(percentage_of_absatz = round(percentage_of_absatz, 2))
reticulate::repl_python()
reticulate::repl_python()
library(readr)
query_hive_126348 <- read_csv("C:/Users/u237480/Downloads/query-hive-126348.csv")
View(query_hive_126348)
library(tidyr)
library(dplyr)
library(tidyverse)
library(lubridate)
query_hive_126348 %>% filter(date(time_occupied) = "2023-06-03")
query_hive_126348 %>% filter(date(time_occupied) == "2023-06-03")
colnames(query_hive_126348)
query_hive_126348 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-03")
query_hive_126348 %>% select(rep_focus_timeslots.time_occupied) %>% mutate(day_occ = date(rep_focus_timeslots.time_occupied))
query_hive_126348 %>% select(rep_focus_timeslots.time_occupied) %>% mutate(day_occ = date(rep_focus_timeslots.time_occupied)) %>% select(day_occ) %>% distinct(())
query_hive_126348 %>% select(rep_focus_timeslots.time_occupied) %>% mutate(day_occ = date(rep_focus_timeslots.time_occupied)) %>% select(day_occ) %>% distinct()
view(query_hive_126348 %>% select(rep_focus_timeslots.time_occupied) %>% mutate(day_occ = date(rep_focus_timeslots.time_occupied)) %>% select(day_occ) %>% distinct())
query_hive_126348 %>% mutate(sub_timestamp_utc = as_datetime(rep_focus_timeslots.subscribertimestamp))
library(readr)
query_hive_126376 <- read_csv("C:/Users/u237480/Downloads/query-hive-126376.csv")
View(query_hive_126376)
query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-03")
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-03"))
View(query_hive_126376)
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-04"))
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-02"))
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-02"))
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-02")) %>% distinct()
colnames(query_hive_126376)
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-02"))%>% select(-c("rep_focus_timeslots.subscribertimestamp")) %>% distinct()
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-02"))%>% select(-c(rep_focus_timeslots.subscribertimestamp)) %>% distinct()
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-02")%>% select(-c(rep_focus_timeslots.subscribertimestamp)) %>% distinct())
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-03")%>% select(-c(rep_focus_timeslots.subscribertimestamp)) %>% distinct())
view(query_hive_126376 %>% filter(date(rep_focus_timeslots.time_occupied) == "2023-06-03")%>% select(-c(rep_focus_timeslots.subscribertimestamp)))
library(tidyverse)
library(lubridate)
library(tidyverse)
getwd()
setwd("./../..")
getwd()
setwd("C:/devsbb/code/flatland_cleanrl")
original_rollout_data <- read.csv("./rollout_history/combined_rollout_tree_embedding.csv")
summary(original_rollout_data)
original_rollout_data <- original_rollout_data %>%
mutate(
X0.1 = as.logical(X0.1)
)
print(original_rollout_data$X0.1)
original_rollout_data <- read.csv("./rollout_history/combined_rollout_tree_embedding.csv")
summary(original_rollout_data)
original_rollout_data <- original_rollout_data %>%
mutate(
X0.1 = as.logical(X0.1),
X1.1 = as.logical(X1.1),
X2.1 = as.logical(X2.1),
X3.1 = as.logical(X3.1),
X4.1 = as.logical(X4.1),
left_switch = X1.1 & X2.1,
right_switch = X3.1 & X2.1
)
summary(original_rollout_data)
ggplot(original_rollout_data %>% select(X1, X2, left_switch), mapping = aes(
x = X1,
y = X2,
color = left_switch)) +
geom_point()
rollout_data_long <- pivot_longer(original_rollout_data, X1:X127)
summary(rollout_data_long)
head(rollout_data_long)
rollout_data_long <- pivot_longer(original_rollout_data, X:X127)
head(rollout_data_long)
geom_boxplot()
ggplot(rollout_data_long, mapping = aes(x = name, y = value, color = left_switch)) +
geom_boxplot()
rollout_data_long <- pivot_longer(original_rollout_data %>% select(-c(X)), X:X127)
rlang::last_trace()
rollout_data_long <- pivot_longer(original_rollout_data %>% select(-c(X)), X0:X127)
ggplot(rollout_data_long, mapping = aes(x = name, y = value, color = left_switch)) +
geom_boxplot()
rollout_data_long_summary <- rollout_data_long %>% group_by(name) %>%
summarize(mean_value = mean(value))
rollout_data_long_summary
rollout_data_long_summary <- rollout_data_long %>% group_by(name, left_switch, right_switch) %>%
summarize(mean_value = mean(value))
ggplot(rollout_data_long_summary, mapping = aes(x = left_switch, y = value, color = left_switch)) +
geom_boxplot()
ggplot(rollout_data_long_summary, mapping = aes(x = left_switch, y = mean_value, color = left_switch)) +
geom_boxplot()
ggplot(rollout_data_long_summary, mapping = aes(x = left_switch, y = mean_value, color = left_switch)) +
geom_line()
ggplot(rollout_data_long_summary, mapping = aes(x = left_switch, y = mean_value, color = left_switch, group = left_switch)) +
geom_line()
ggplot(rollout_data_long_summary, mapping = aes(x = left_switch, y = mean_value, color = left_switch, group = name)) +
geom_line()
ggplot(rollout_data_long_summary, mapping = aes(x = left_switch, y = mean_value, group = name)) +
geom_line()
original_rollout_data <- read.csv("./rollout_history/combined_rollout_tree_embedding.csv")
summary(original_rollout_data)
original_rollout_data <- original_rollout_data %>%
mutate(
X0.1 = as.logical(X0.1),
X1.1 = as.logical(X1.1),
X2.1 = as.logical(X2.1),
X3.1 = as.logical(X3.1),
X4.1 = as.logical(X4.1),
left_switch = X1.1 & X2.1,
right_switch = X3.1 & X2.1,
decision_possible = case_when(
left_switch ~ "left_switch",
right_switch ~ "right_switch",
TRUE ~ "no_switch"
)
)
rollout_data_long <- pivot_longer(original_rollout_data %>% select(-c(X)), X0:X127)
rollout_data_long_summary <- rollout_data_long %>% group_by(name, decision_possible) %>%
summarize(mean_value = mean(value))
ggplot(rollout_data_long_summary, mapping = aes(x = decision_possible, y = mean_value, group = name)) +
geom_line()
ggplot(rollout_data_long_summary %>% filter(abs(mean_value)<0.1), mapping = aes(x = decision_possible, y = mean_value, group = name)) +
geom_line()
ggplot(rollout_data_long_summary %>% filter(abs(mean_value)>0.1), mapping = aes(x = decision_possible, y = mean_value, group = name)) +
geom_line()
rollout_data_long_summary <- rollout_data_long %>% group_by(name, decision_possible) %>%
summarize(mean_value = mean(value)) %>%
group_by(name) %>%
mutate(max_value = max(mean_value),
min_value = min(mean_value),
delta = abs(max_value - min_value)
)
ggplot(rollout_data_long_summary %>% filter(delta >0.1), mapping = aes(x = decision_possible, y = mean_value, group = name)) +
geom_line()
ggplot(rollout_data_long_summary %>% filter(delta >0.2), mapping = aes(x = decision_possible, y = mean_value, group = name)) +
geom_line()
ggplot(rollout_data_long_summary %>% filter(delta >0.3), mapping = aes(x = decision_possible, y = mean_value, group = name)) +
geom_line()
ggplot(rollout_data_long_summary %>% filter(delta >0.3), mapping = aes(x = decision_possible, y = mean_value, group = name, color = name)) +
geom_line()
library(prcomp)
install.packages("prcomp")
library(stats)
pca <- prcomp(rollout_data %>% select(X0:X127))
pca <- prcomp(rollout_data_original %>% select(X0:X127))
pca <- prcomp(original_rollout_data %>% select(X0:X127))
plot(pca)
print(pca$rotation)
print(pca$sdev)
print(pca$sdev^2)
biplot(pca)
summary(pca)
pcaCharts(pca)
pca$x
ggplot(pca$x %>% select(PC1, PC2), mapping = aes(x = PC1, y = PC2)) +
geom_point()
ggplot(pca$x[,1:2], mapping = aes(x = PC1, y = PC2)) +
geom_point()
pca_df <- data.frame(pca$x)
ggplot(pca_df[,1:2], mapping = aes(x = PC1, y = PC2)) +
geom_point()
pca_df <- cbind(data.frame(pca$x), original_rollout_data$decision_possible)
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point()
pca_df <- cbind(data.frame(pca$x), original_rollout_data$decision_possible)
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point()
colnames(pca_df)
pca_df <- cbind(data.frame(pca$x), original_rollout_data$decision_possible) %>%
rename("decision_possilbe" = "original_rollout_data$decision_possible")
colnames(pca_df)
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point()
pca_df <- cbind(data.frame(pca$x), original_rollout_data$decision_possible) %>%
rename("decision_possible" = "original_rollout_data$decision_possible")
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point()
pca_df %>% group_by(decision_possible) %>% summarize(count = n())
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_jitter()
pca_df %>% select(PC1, PC2, decision_possible)
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point(position = "jitter")
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point(position = position_jitter(width = 0.1, height = 0.1))
ggplot(pca_df %>% select(PC1, PC2, decision_possible), mapping = aes(x = PC1, y = PC2, color = decision_possible)) +
geom_point(position = position_jitter(width = 0.05, height = 0.05))
pca_df %>% group_by(decision_possible) %>% summarize(count = n())
summary(pca)
summary(pca)
plot(pca)
summary(pca)
rollout_data_long <- pivot_longer(original_rollout_data %>% select(-c(X)), X0:X127)
summary(rollout_data_long)
head(rollout_data_long)
ggplot(rollout_data_long, mapping = aes(x = name, y = value, color = left_switch)) +
geom_boxplot()
rollout_data_long_summary <- rollout_data_long %>% group_by(name, decision_possible) %>%
summarize(mean_value = mean(value)) %>%
group_by(name) %>%
mutate(max_value = max(mean_value),
min_value = min(mean_value),
delta = abs(max_value - min_value)
)
ggplot(rollout_data_long_summary %>% filter(delta >0.3), mapping = aes(x = decision_possible, y = mean_value, group = name, color = name)) +
geom_line()
